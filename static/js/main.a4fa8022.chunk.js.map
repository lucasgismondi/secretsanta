{"version":3,"sources":["LuckyDraw/Arc.js","LuckyDraw/Wheel.js","LuckyDraw/LuckyDraw.js","LuckyDraw/index.js","App.js","serviceWorker.js","index.js","santa2.png"],"names":["Arc","props","midAngle","endAngle","Math","PI","startAngle","textAngle","className","transform","centroid","dy","style","shapeRendering","textAnchor","writingMode","writingModel","fontSize","fill","fontColor","text","this","arc","innerRadius","outerRadius","d","stroke","stoke","showInnerLabels","renderInnerLabel","Component","Wheel","range","array","i","push","wheelSize","data","_processData","Pie","pie","sort","map","idx","colorIdx","textLabel","ArabicLabel","textArray","key","schemeCategory20","width","height","defaultProps","StyledButton","styled","button","Wrapper","div","LuckyDraw","state","startDraw","drawTimes","randomNumber","rolling","min","max","floor","random","turns","drawNumber","e","preventDefault","drawTime","drawLimitSwitch","drawLimit","setState","setTimeout","onSuccessDrawReturn","rotateSecond","onOutLimitAlert","transformRotate","_processDrawAngle","transitionDuration","onClick","_processDrawing","drawButtonLabel","GreenBar","RedBar","MainContent","DownArrow","StyledText","PrizeWrapper","StyledPrizeText","App","page","renderPrizes","renderSpinWheel","limit","console","log","renderFinalPage","src","Santa","alt","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a4fa8022.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { arc } from 'd3';\nimport PropTypes from 'prop-types';\n\nclass Arc extends Component {\n    static propTypes = {\n        text: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        startAngle: PropTypes.number,\n        endAngle: PropTypes.number,\n        innerRadius: PropTypes.number,\n        outerRadius: PropTypes.number,\n        labelTextRotate: PropTypes.number,\n        stoke: PropTypes.number,\n        showInnerLabels: PropTypes.bool,\n        fontColor: PropTypes.string,\n        fontSize: PropTypes.string,\n        fontFamily: PropTypes.string,\n        writingModel: PropTypes.string\n    };\n\n    renderInnerLabel(props, Arc) {\n        let midAngle =\n            props.endAngle < Math.PI\n                ? props.startAngle / 2 + props.endAngle / 2\n                : props.startAngle / 2 + props.endAngle / 2 + Math.PI;\n        let textAngle =\n            (midAngle * 180) / Math.PI > 180\n                ? (midAngle * 180) / Math.PI - 180\n                : (midAngle * 180) / Math.PI;\n        return (\n            <text\n                className=\"rld-value\"\n                transform={`translate(${Arc.centroid()}) rotate(${textAngle})`}\n                dy=\".45em\"\n                style={{\n                    shapeRendering: 'crispEdges',\n                    textAnchor: 'middle',\n                    writingMode: props.writingModel,\n                    fontSize: props.fontSize,\n                    fill: props.fontColor\n                }}\n            >\n                {props.text}\n            </text>\n        );\n    }\n\n    render() {\n        const props = this.props;\n        const Arc = arc()\n            .innerRadius(props.innerRadius)\n            .outerRadius(props.outerRadius)\n            .startAngle(props.startAngle)\n            .endAngle(props.endAngle);\n\n        return (\n            <g className=\"rld-compass\">\n                <path d={Arc()} fill={props.fill} stroke={props.stoke} />\n                {props.showInnerLabels\n                    ? this.renderInnerLabel(props, Arc)\n                    : null}\n            </g>\n        );\n    }\n}\n\nexport default Arc;\n","import React, { Component } from 'react';\nimport { schemeCategory20, pie } from 'd3';\nimport Arc from './Arc';\nimport PropTypes from 'prop-types';\n\nclass Wheel extends Component {\n    static propTypes = {\n        wheelSize: PropTypes.number.isRequired,\n        range: PropTypes.number.isRequired,\n        innerRadius: PropTypes.number,\n        outerRadius: PropTypes.number,\n        stoke: PropTypes.number,\n        showInnerLabels: PropTypes.bool,\n        textArray: PropTypes.array,\n        fontColor: PropTypes.string,\n        fontSize: PropTypes.string,\n        writingModel: PropTypes.string\n    };\n    static defaultProps = {};\n\n    _processData(range) {\n        let array = [];\n        for (var i = 0; i < range; i++) {\n            array.push(100 / range);\n        }\n        return array;\n    }\n\n    render() {\n        const props = this.props;\n        const transform = `translate(${props.wheelSize / 2},${props.wheelSize /\n            2}) rotate(-${180 / props.range})`;\n        const data = this._processData(props.range);\n        const arcs = pie()(data).sort();\n        const Pie = arcs.map((i, idx) => {\n            let colorIdx = idx > 19 ? idx % 20 : idx;\n            const textLabel = !props.ArabicLabel\n                ? props.textArray[idx]\n                    ? props.textArray[idx]\n                    : idx + 1\n                : idx + 1;\n\n            return (\n                <Arc\n                    key={idx}\n                    innerRadius={props.innerRadius}\n                    outerRadius={props.outerRadius}\n                    startAngle={i.startAngle}\n                    endAngle={i.endAngle}\n                    showInnerLabels={props.showInnerLabels}\n                    text={textLabel}\n                    fill={schemeCategory20[colorIdx]}\n                    stoke={props.stoke}\n                    fontColor={props.fontColor}\n                    fontSize={props.fontSize}\n                    writingModel={props.writingModel}\n                />\n            );\n        });\n        return (\n            <svg width={props.wheelSize} height={props.wheelSize}>\n                <g transform={transform}>{Pie}</g>\n            </svg>\n        );\n    }\n}\n\nexport default Wheel;\n","import React, { Component } from 'react';\nimport Wheel from './Wheel';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n    margin: 30px;\n    border-radius: 4px;\n    border-color: orange;\n    border-width: 3px;\n    color: orange;\n    background-color: transparent;\n    cursor: pointer;\n    height: 50px;\n    width: 150px;\n    font-size: 30px;\n`;\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n\nclass LuckyDraw extends Component {\n    static propTypes = {\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n        range: PropTypes.number.isRequired,\n        wheelSize: PropTypes.number,\n        turns: PropTypes.number,\n        innerRadius: PropTypes.number,\n        outerRadius: PropTypes.number,\n        stoke: PropTypes.number,\n        showInnerLabels: PropTypes.bool,\n        drawLimitSwitch: PropTypes.bool,\n        drawLimit: PropTypes.number,\n        textArray: PropTypes.array,\n        fontColor: PropTypes.string,\n        fontSize: PropTypes.string,\n        writingModel: PropTypes.string,\n        drawButtonLabel: PropTypes.string,\n        ArabicLabel: PropTypes.bool,\n        onSuccessDrawReturn: PropTypes.func,\n        onOutLimitAlert: PropTypes.func\n    };\n    static defaultProps = {\n        width: 500,\n        height: 350,\n        stoke: 20,\n        range: 20,\n        turns: 3,\n        rotateSecond: 5,\n        drawLimit: 3,\n        drawLimitSwitch: false,\n        fontColor: '#000',\n        fontSize: '18px',\n        writingModel: 'tb',\n        drawButtonLabel: 'Start',\n        ArabicLabel: false,\n        textArray: []\n    };\n\n    constructor(props) {\n        super(props);\n        if (!('wheelSize' in props)) {\n            this.props.wheelSize = this.defaultProps.width * 2;\n        }\n        this.state = {\n            startDraw: false,\n            drawTimes: 1,\n            randomNumber: null,\n            rolling: false\n        };\n    }\n\n    _processRandomNumber(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    _processDrawAngle(range, turns, drawTimes, drawNumber) {\n        const peer = 360 / range;\n        const totalAngle = 360 * turns * drawTimes + drawNumber * peer;\n        return totalAngle;\n    }\n\n    _processDrawing(e) {\n        e.preventDefault();\n        if (!this.state.rolling) {\n            let drawTime = this.state.drawTimes;\n            if (\n                this.props.drawLimitSwitch &&\n                drawTime - 1 < this.props.drawLimit\n            ) {\n                this.setState({\n                    startDraw: true,\n                    rolling: true,\n                    randomNumber: 4,\n                    drawTimes: this.state.drawTimes + 1\n                });\n                setTimeout(() => {\n                    this.setState({\n                        rolling: false\n                    });\n                    this.props.onSuccessDrawReturn(this.state.randomNumber);\n                }, this.props.rotateSecond * 1000);\n            } else {\n                this.props.onOutLimitAlert(true);\n            }\n        }\n    }\n\n    render() {\n        const state = this.state;\n        const props = this.props;\n        let transformRotate = state.startDraw\n            ? this._processDrawAngle(\n                  props.range,\n                  props.turns,\n                  state.drawTimes,\n                  state.randomNumber\n              )\n            : 0;\n        return (\n            <div\n                className=\"react_luckyDraw\"\n                style={{\n                    width: props.width,\n                    height: props.height\n                }}\n            >\n                <Wrapper\n                    className={\n                        state.rolling\n                            ? 'compass__container rolling'\n                            : 'compass__container'\n                    }\n                >\n                    <div className=\"control__panel\">\n                        <div className=\"compass__arrow\" />\n                        <div\n                            className=\"compass__spin\"\n                            style={{\n                                width: props.wheelSize + 'px',\n                                height: props.wheelSize + 'px',\n                                transform: `rotate(${-transformRotate}deg) translate3d(0,0,-1px)`,\n                                transitionDuration: `${props.rotateSecond}s`\n                            }}\n                        >\n                            <Wheel {...props} />\n                        </div>\n                    </div>\n                    <StyledButton\n                        onClick={e => {\n                            this._processDrawing(e);\n                        }}\n                    >\n                        {props.drawButtonLabel}\n                    </StyledButton>\n                </Wrapper>\n            </div>\n        );\n    }\n}\n\nexport default LuckyDraw;\n","import LuckyDraw from './LuckyDraw';\n\nexport default LuckyDraw;\n","import React from 'react';\nimport './App.css';\nimport LuckyDraw from './LuckyDraw';\nimport styled from 'styled-components';\nimport Confetti from 'react-confetti';\nimport Santa from './santa2.png';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    min-height: 100%;\n`;\n\nconst GreenBar = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    min-height: 100%;\n    width: 20%;\n    background-color: green;\n`;\n\nconst RedBar = styled.div`\n    background-color: red;\n    min-height: 100%;\n    width: 60%;\n`;\n\nconst MainContent = styled.div`\n    position: absolute;\n    padding: 15px;\n    display: flex;\n    align-items: center;\n    min-height: 100%;\n    flex-direction: column;\n    margin-left: auto;\n    margin-right: auto;\n    left: 0;\n    right: 0;\n`;\n\nconst DownArrow = styled.i`\n    margin: 10px;\n    border: solid orange;\n    border-width: 0 3px 3px 0;\n    display: inline-block;\n    padding: 3px;\n    transform: rotate(45deg);\n    -webkit-transform: rotate(45deg);\n`;\n\nconst StyledText = styled.div`\n    font-size: 25px;\n`;\n\nconst PrizeWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 25px;\n`;\n\nconst StyledButton = styled.button`\n    margin: 30px;\n    border-radius: 4px;\n    border-color: orange;\n    border-width: 3px;\n    color: orange;\n    background-color: transparent;\n    cursor: pointer;\n    height: 50px;\n    width: 175px;\n    font-size: 30px;\n`;\n\nconst StyledPrizeText = styled.div`\n    margin: 30px;\n    font-size: 50px;\n`;\n\nclass App extends React.Component {\n    state = {\n        page: 1\n    };\n\n    renderPrizes = () => {\n        const { page } = this.state;\n        return (\n            <MainContent className={page === 1 ? 'visible' : 'hidden'}>\n                <StyledText>\n                    Welcome to your Secret Santa Present, Peter!\n                </StyledText>\n                <StyledText>\n                    Below are the things you wished for this Christmas:\n                </StyledText>\n                <PrizeWrapper>\n                    <StyledText>Stuff</StyledText>\n                    <StyledText>Ferrari</StyledText>\n                    <StyledText>World Peace </StyledText>\n                    <StyledText>$1 BILLION</StyledText>\n                    <StyledText>10 $50 Amazon gift cards</StyledText>\n                    <StyledText>Direct Flight to Vegas</StyledText>\n                    <StyledText>2 Zucchero Concert tickets</StyledText>\n                    <StyledText>Artify 2019 Paint Brush Set</StyledText>\n                    <StyledText>Under Armour Truckstop Beanie</StyledText>\n                    <StyledText>Camry Digital Luggage Scale</StyledText>\n                </PrizeWrapper>\n                <StyledText>\n                    Today, you will be granted one of these wishes\n                </StyledText>\n                <StyledText>Click Continue to claim your present!</StyledText>\n                <StyledButton onClick={() => this.setState({ page: 2 })}>\n                    CONTINUE\n                </StyledButton>\n            </MainContent>\n        );\n    };\n\n    renderSpinWheel = () => {\n        const { page } = this.state;\n\n        return (\n            <MainContent className={page === 2 ? 'visible' : 'hidden'}>\n                <StyledText>\n                    Spin the Wheel to claim your Secret Santa Present!\n                </StyledText>\n                <DownArrow />\n                <LuckyDraw\n                    width={400}\n                    height={350}\n                    wheelSize={400}\n                    range={10}\n                    innerRadius={25}\n                    outerRadius={200}\n                    showInnerLabels\n                    drawLimitSwitch\n                    drawLimit={1}\n                    fontColor={'#000'}\n                    fontSize={'12px'}\n                    writingModel={'tb'}\n                    drawButtonLabel=\"SPIN\"\n                    textArray={[\n                        'Camry Digital Luggage Scale',\n                        'Under Armour Truckstop Beanie',\n                        'Artify 2019 Paint Brush Set',\n                        '$1 BILLION',\n                        '10 $50 Amazon gift cards',\n                        'World Peace',\n                        'Ferrari',\n                        'Direct Flight to Vegas',\n                        '2 Zucchero Concert tickets',\n                        'Stuff'\n                    ]}\n                    onSuccessDrawReturn={drawNumber => {\n                        setTimeout(() => this.setState({ page: 3 }), 2000);\n                    }}\n                    onOutLimitAlert={limit => {\n                        if (limit) {\n                            console.log('out of limits');\n                        }\n                    }}\n                />\n            </MainContent>\n        );\n    };\n\n    renderFinalPage = () => {\n        const { page } = this.state;\n\n        return (\n            <MainContent className={page === 3 ? 'visible' : 'hidden'}>\n                <Confetti />\n                <StyledText>\n                    Congratulations you won:\n                </StyledText>\n                <StyledPrizeText>\n                    10 $50 Amazon gift cards\n                </StyledPrizeText>\n                <StyledText>\n                    You will receive your present shortly!\n                </StyledText>\n                <StyledText>\n                    Merry Christmas!!!\n                </StyledText>\n            </MainContent>\n        );\n    };\n\n    render() {\n        const { page } = this.state;\n\n        return (\n            <Wrapper>\n                <GreenBar>\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                </GreenBar>\n                <RedBar>\n                    {this.renderPrizes()}\n                    {this.renderSpinWheel()}\n                    {this.renderFinalPage()}\n                </RedBar>\n                <GreenBar>\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                    <img src={Santa} alt=\"santa\" width=\"167px\" height=\"250px\" />\n                </GreenBar>\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/santa2.1b5029d8.png\";"],"sourceRoot":""}